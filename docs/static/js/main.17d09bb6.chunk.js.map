{"version":3,"sources":["Header.js","Todo.js","todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","padding","Header","style","Todo","backgroundColor","borderBottom","textDecoration","this","props","todoProp","completed","id","title","getStyle","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","todoItem","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","placeholder","flex","className","App","todo","filter","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qOAUA,IAAMA,EAAc,CAChBC,WAAY,OACZC,MAAO,OACPC,QAAS,QAIEC,EAff,WACI,OACI,4BAAQC,MAAOL,GACX,0CCFNM,E,yKAEE,MAAO,CAACC,gBAAiB,UACjBJ,QAAS,OACTK,aAAc,mBACtBC,eAAgBC,KAAKC,MAAMC,SAASC,UAAY,eAAiB,U,+BAM3D,IAAD,EACeH,KAAKC,MAAMC,SAAxBE,EADF,EACEA,GAAIC,EADN,EACMA,MACX,OAAO,yBAAKV,MAASK,KAAKM,YACd,2BACI,2BAAOC,KAAK,WAAWC,SAAUR,KAAKC,MAAMQ,aAAaC,KAAKV,KAAMI,KAAO,IAC1EC,EACD,4BAAQM,QAASX,KAAKC,MAAMW,QAAQF,KAAKV,KAAMI,GAAKT,MAASkB,GAA7D,W,GAjBLC,aAuBbD,EAAY,CACdtB,WAAY,UACZC,MAAO,OACPuB,OAAQ,mBACRtB,QAAS,UACTuB,aAAc,MACdC,OAAQ,UACRC,MAAO,SAOItB,ICtBAuB,E,uKAZD,IAAD,OACCC,EAAQpB,KAAKC,MAAMmB,MACzB,OAAO,6BAAMA,EAAMC,KAAI,SAACC,GACpB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAASlB,GAAIF,SAAUoB,EAAUb,aAAc,EAAKR,MAAMQ,aAAcG,QAAS,EAAKX,MAAMW,kB,GALtGE,a,OCgCLU,E,4MAjCXC,MAAQ,CACJpB,MAAO,I,EAEXqB,SAAW,SAACC,GACRA,EAAEC,iBACF,EAAK3B,MAAM4B,QAAQ,EAAKJ,MAAMpB,OAC9B,EAAKyB,SAAS,CAACzB,MAAO,M,EAG1BG,SAAW,SAACmB,GAAD,OAAO,EAAKG,SAAL,eAAiBH,EAAEI,OAAOC,KAAOL,EAAEI,OAAOE,S,uDAG5D,OACE,0BAAMP,SAAU1B,KAAK0B,SAAU/B,MAAO,CAAEuC,QAAS,SAC/C,2BACE3B,KAAK,OACLyB,KAAK,QACLG,YAAY,cACZxC,MAAO,CAAEyC,KAAM,KAAM3C,QAAS,OAAQsB,OAAQ,oBAC9CkB,MAAOjC,KAAKyB,MAAMpB,MAClBG,SAAUR,KAAKQ,WAEjB,2BACED,KAAK,SACL0B,MAAM,SACNI,UAAU,MACV1C,MAAO,CAAEyC,KAAM,Y,GA3BHtB,aCmDPwB,G,kNA9Cbb,MAAQ,CACNL,MAAO,CACL,CACEhB,GAAI,EACJC,MAAO,cACPF,WAAW,GAEb,CACEC,GAAI,EACJC,MAAO,eACPF,WAAW,GAEb,CACEC,GAAI,EACJC,MAAO,eACPF,WAAW,K,EAIjBM,aAAe,SAACL,GACd,EAAK0B,SAAS,CAACV,MAAO,EAAKK,MAAML,MAAMC,KAAI,SAAAkB,GAIzC,OAHGA,EAAKnC,KAAOA,IACbmC,EAAKpC,WAAaoC,EAAKpC,WAElBoC,Q,EAKX3B,QAAU,SAACR,GACT,EAAK0B,SAAS,CAAEV,MAAM,YAAK,EAAKK,MAAML,MAAMoB,QAAO,SAAAD,GAAI,OAAIA,EAAKnC,KAAOA,S,EAEzEyB,QAAU,SAACxB,GACToC,QAAQC,IAAIrC,I,uDAGZ,OAAO,yBAAKgC,UAAU,OACpB,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASR,QAAS7B,KAAK6B,UACvB,kBAAC,EAAD,CAAOT,MAAOpB,KAAKyB,MAAML,MAAOX,aAAgBT,KAAKS,aAAcG,QAASZ,KAAKY,gB,GAzCvEE,cCME6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.17d09bb6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n        </header>\r\n    )\r\n};\r\n\r\nconst headerStyle = {\r\n    background: \"#333\",\r\n    color: \"#fff\",\r\n    padding: \"10px\"\r\n};\r\n\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todo extends Component {\r\n    getStyle() { \r\n        return {backgroundColor: \"#f4f4f4\",\r\n                padding: \"10px\",\r\n                borderBottom: \"1px dotted black\",\r\n        textDecoration: this.props.todoProp.completed ? \"line-through\" : \"none\",\r\n        };\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const {id, title} = this.props.todoProp;\r\n        return <div style = {this.getStyle()}>\r\n                    <p>\r\n                        <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/>{\" \"}\r\n                        {title}\r\n                        <button onClick={this.props.delTodo.bind(this, id)} style = {btnStyle}>X</button>\r\n                    </p>\r\n               </div>\r\n    }\r\n}\r\n\r\nconst btnStyle =  {\r\n    background: \"#ff0000\",\r\n    color: \"#fff\",\r\n    border: \"1px dotted black\",\r\n    padding: \"5px 9px\",\r\n    borderRadius: \"50%\",\r\n    cursor: \"pointer\",\r\n    float: \"right\",\r\n}\r\n\r\nTodo.propTypes = {\r\n    todoProp: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Todo;","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n    \r\n    render() {\r\n        const todos = this.props.todos;\r\n        return <div>{todos.map((todoItem) =>{\r\n            return <Todo key={todoItem.id} todoProp={todoItem} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>;\r\n        })}</div>;\r\n    }\r\n}\r\n\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default Todos;","import React, { Component } from \"react\";\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: \"\"});\r\n    } \r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value});\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo...\"\r\n          style={{ flex: \"10\", padding: \"10px\", border: \"1px solid orange\" }}\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"submit\"\r\n          className=\"btn\"\r\n          style={{ flex: \"1\" }}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Todos from \"./todos\";\nimport AddTodo from \"./AddTodo\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: 1,\n        title: \"hello world\",\n        completed: false,\n      },\n      {\n        id: 2,\n        title: \"hello worlda\",\n        completed: false,\n      },\n      {\n        id: 3,\n        title: \"hello worlds\",\n        completed: false,\n      },\n    ],\n  };\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo =>{\n      if(todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    })\n  });\n  };\n\n  delTodo = (id) => {\n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]});\n  };\n  addTodo = (title) => {\n    console.log(title);\n  }\n  render() {\n    return <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <AddTodo addTodo={this.addTodo} />\n        <Todos todos={this.state.todos} markComplete = {this.markComplete} delTodo={this.delTodo}/>\n      </div>\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}