{"version":3,"sources":["Header.js","Todo.js","todos.js","AddTodo.js","About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","padding","linkStyle","textDecoration","Header","style","to","Todo","backgroundColor","borderBottom","this","props","todoProp","completed","id","title","getStyle","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","todoItem","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","placeholder","flex","className","About","Fragment","App","todo","Axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87370725.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TodoList</h1>\r\n      <Link to=\"/\" style={linkStyle}>Home</Link> | <Link to=\"/about\" style={linkStyle}>About</Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  padding: \"10px\",\r\n};\r\n\r\nconst linkStyle = {\r\n    color: \"white\",\r\n    textDecoration: \"none\"    \r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todo extends Component {\r\n  getStyle() {\r\n    return {\r\n      backgroundColor: \"#f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px dotted black\",\r\n      textDecoration: this.props.todoProp.completed ? \"line-through\" : \"none\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { id, title } = this.props.todoProp;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n          />{\" \"}\r\n          {title}\r\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>\r\n            X\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst btnStyle = {\r\n  background: \"#ff0000\",\r\n  color: \"#fff\",\r\n  border: \"1px dotted black\",\r\n  padding: \"5px 9px\",\r\n  borderRadius: \"50%\",\r\n  cursor: \"pointer\",\r\n  float: \"right\",\r\n};\r\n\r\nTodo.propTypes = {\r\n  todoProp: PropTypes.object.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    const todos = this.props.todos;\r\n    return (\r\n      <div>\r\n        {todos.map((todoItem) => {\r\n          return (\r\n            <Todo\r\n              key={todoItem.id}\r\n              todoProp={todoItem}\r\n              markComplete={this.props.markComplete}\r\n              delTodo={this.props.delTodo}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Todos;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: \"\"});\r\n    } \r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value});\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo...\"\r\n          style={{ flex: \"10\", padding: \"10px\", border: \"1px solid orange\" }}\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"submit\"\r\n          className=\"btn\"\r\n          style={{ flex: \"1\" }}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nfunction About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>\r\n        This is the Todo App v0.0.1 It is part of a React Crash-course from\r\n        Traversy media\r\n      </p>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Todos from \"./todos\";\nimport AddTodo from \"./AddTodo\";\nimport About from \"./About\";\nimport \"./App.css\";\n\nimport Axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n\n  componentDidMount() {\n    Axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then(res => this.setState({ todos: res.data}))\n  }\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  delTodo = (id) => {\n    Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then( res => this.setState({\n      todos: [...this.state.todos.filter((todo) => todo.id !== id)]\n    }));\n  };\n\n  addTodo = (title) => {\n    Axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false,\n    }).then( res => {\n      this.setState({todos: [...this.state.todos, res.data]})\n    })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route\n              exact path=\"/\"\n              render={(props) => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos\n                    todos={this.state.todos}\n                    markComplete={this.markComplete}\n                    delTodo={this.delTodo}\n                  />\n                </React.Fragment>\n              )}\n            />\n            <Route path=\"/about\" component={About}></Route>\n          </div>\n        </div>\n        \n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}